NonTerminals {
    program,
    data_declaration,
    function_declaration,
    parameters,
    statement,
    if_statement,
    while_statement,
    return_statement,
    for_statement,
    continue_statement,
    break_statement,
    use_statement,
    variable_declaration,
    expression,
    function_call,
    term,
    factor,
    typed_identifier,
    type_specifier,
    identifier,
    number,
    string,
}


program: (data_declaration | function_declaration)+

data_declaration : (IDENTIFIER ':' IDENTIFIER ',')+

function_definition : 'fn' IDENTIFIER '(' parameter_list? ')' ':' IDENTIFIER block

parameter_list : IDENTIFIER ':' IDENTIFIER (',' IDENTIFIER ':' IDENTIFIER)*

statement: if_statement
    | while_statement
    | declaration_statement
    | assignment_statement
    | expression ';'

block: '{' statement* '}'

if_statement: 'if' expression block 'else' block
    | 'if' expression block

while_statement: 'while' expression block

declaration_statement : 'let' IDENTIFIER ':' IDENTIFIER '=' expression ';'

assignment_statement : compositeIdentifier '=' expression ';'

expression: functionCall
    | expression '+' term
    | expression '-' term
    | term

functionCall: IDENTIFIER '(' expression_list? ')' ';'

expression_list : expression (',' expression)*

term: term '*' factor
    | term '/' factor
    | factor

factor: '(' expression ')'
    | compositeIdentifier
    | NUMBER

compositeIdentifier = IDENTIFIER ('.' IDENTIFIER)*

NUMBER: [0-9]+([.][0-9]+)?

IDENTIFIER: [a-zA-Z_][a-zA-Z0-9_]*

WHITESPACE: [ \t\r\n]+